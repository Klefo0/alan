#!/usr/bin/env python
import os, psutil, subprocess, nltk
import re
from language import grammar, vocabulary
from senses import ears
import sys
from memory import context, store_memories
import environment.system
import inference.inference



nltk_download_path = os.environ['USERPROFILE'] + r"\AppData\Roaming\nltk_data"
if os.path.exists(nltk_download_path+r"\tokenizers") and os.path.exists(nltk_download_path+r"\taggers"):
  pass
else:
  nltk.download('punkt')
  nltk.download('averaged_perceptron_tagger')


def speak(response):
  """
    Function to speak to the user. Text to speech based on the platform alan is running on.

    Args:
      response (String): The response generated by think().
    Returns:
      None
  """
  if sys.platform == "darwin" and len(context.voice) > 0:
    os.system('echo \"{}\" | say -v {}'.format(response, memory.context.voice))
  elif sys.platform == "darwin":
    os.system('echo \"{}\" | say '.format(response))
  elif sys.platform == "win32":
    """
    parent_pid = os.getppid()
    if psutil.Process(parent_pid).name() == 'cmd.exe':
      print("Please run it on PowerShell")
    elif psutil.Process(parent_pid).name() == 'powershell.exe':
    """
    powershell = r"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"
    
    print(subprocess.Popen([powershell,"-ExecutionPolicy","Bypass","-File",".\shell.ps1"],
                           shell=True,
                           stdout=subprocess.PIPE,
                           universal_newlines=True).communicate()[0])
    
  else:  os.system('echo \"{}\" | festival --tts'.format(response))



def listen():
  """
    Function to listen. Modes of listening should be added here.
    Could be listening to terminal or mic etc.

    Returns:
      String: Words input from the user.
  """
  if context.no_prompt:  return ears.ears()
  return input(">>>").strip()


def think(words):
  """
    Function to generate some sort of response from the input passed in by listen().

    Args:
      words (String): Words taken in from the listen command.
    Returns:
      String: Returns a response for the given input.
  """

  #Check for empty input to think.
  if len(words) == 0 or not words:
    return
  if words == "alan":
    speak("Yes")
    return think(ears.ears())
  elif vocabulary.vocabulary_check(words): return vocabulary.response(words)
  else:  return grammar.branch(words)


if __name__ == "__main__":
  """
    Main method should load configurations for alan and initiate interaction loop.
  """
  ""
  # Look for SQLite DB. If not, create it
  if not store_memories.database_exists():
    store_memories.init_db()
  speak("Hello.")
  while True:
    # Try to execute statement and catch an error. Exit on KeyboardInterrupt.
    try:
      speak(think(listen()))
    except KeyboardInterrupt:
      speak("Shutting down.")
      exit()
    except Exception as e:
      print (e)
      speak("Something went wrong. I can't do that right now.")
      exit()
